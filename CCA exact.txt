javascript:( function() { var para = document.createElement("script"); para.innerHTML = "var elemm = document.querySelectorAll('p,span,h1,h2,h3,h4,h5,h6,a,div,button,label,li,th,td,strong'); lenght=elemm.length; for (i=0;i<lenght;i++) { var elem=elemm[i]; if (elem.nodeName.includes('DIV') && elem.innerHTML.includes('</')){} else if (!elem.innerText==''){ var backgroundColor1 = window.getComputedStyle(elem, null).getPropertyValue('background-color'); var foregroundColor1 = window.getComputedStyle(elem, null).getPropertyValue('color');var fontsize1 = window.getComputedStyle(elem, null).getPropertyValue('font-size'); var fontsize = fontsize1.replace('px','' ); var fontweight = window.getComputedStyle(elem, null).getPropertyValue('font-weight'); var largetext=0; var normaltext=0; if (fontweight>=700) { if (fontsize>=19){ largetext++; } else { normaltext++; } } else { if (fontsize>=24) { largetext++; } else { normaltext++; } } if(backgroundColor1.includes('rgba(0, 0, 0, 0)')){ while(backgroundColor1.includes('rgba(0, 0, 0, 0)')){ elem=elem.parentNode; backgroundColor1=window.getComputedStyle(elem,null).getPropertyValue('background-color'); if(elem.nodeName.includes('HTML')){ break;} } } if (backgroundColor1.includes('rgba(0, 0, 0, 0)')){ backgroundColor1='rgb(255, 255, 255)'; } var a = foregroundColor1.split('(')[1].split(')')[0]; a = a.split(','); var b = backgroundColor1.split('(')[1].split(')')[0]; b = b.split(','); var rgbToHex = function (rgb) { var hex = Number(rgb).toString(16); if (hex.length < 2) { hex = '0' + hex; } return hex; }; var fullColorHex = function(r,g,b) { var red = rgbToHex(r); var green = rgbToHex(g); var blue = rgbToHex(b); return red+green+blue; }; foregroundColor=fullColorHex(a[0],a[1],a[2]); backgroundColor=fullColorHex(b[0],b[1],b[2]); function getLuminance(color) { var Rhex, Ghex, Bhex; if (color.match(/^\s*#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\s*$/i)) { Rhex = RegExp.$1; Ghex = RegExp.$2; Bhex = RegExp.$3; } else if (color.match(/^\s*#?([0-9a-f])([0-9a-f])([0-9a-f])\s*$/i)) { Rhex = RegExp.$1 + RegExp.$1; Ghex = RegExp.$2 + RegExp.$2; Bhex = RegExp.$3 + RegExp.$3; } else { return(NaN); } var R8bit = parseInt(Rhex, 16); var G8bit = parseInt(Ghex, 16); var B8bit = parseInt(Bhex, 16); var RsRGB = R8bit/255; var GsRGB = G8bit/255; var BsRGB = B8bit/255; var R = (RsRGB <= 0.03928) ? RsRGB/12.92 : Math.pow(((RsRGB + 0.055)/1.055), 2.4); var G = (GsRGB <= 0.03928) ? GsRGB/12.92 : Math.pow(((GsRGB + 0.055)/1.055), 2.4); var B = (BsRGB <= 0.03928) ? BsRGB/12.92 : Math.pow(((BsRGB + 0.055)/1.055), 2.4); return (0.2126 * R + 0.7152 * G + 0.0722 * B); } function getContrastRatio(color1, color2) { var L1 = getLuminance(color1); var L2 = getLuminance(color2); return Math.round((Math.max(L1, L2) + 0.05)/(Math.min(L1, L2) + 0.05)*100)/100; } var ratio = getContrastRatio(foregroundColor, backgroundColor); if (normaltext!=0){ if (ratio<4.5 && ratio>1.5){ elemm[i].setAttribute('style', 'outline-style:dashed; outline-color:red'); } } else if (largetext!=0){ if (ratio<3 && ratio>1.5){ elemm[i].setAttribute('style', 'outline-style:dashed; outline-color:red'); } } } } var elemm = document.querySelectorAll('input'); lenght=elemm.length; for (i=0;i<lenght;i++) { var elem=elemm[i]; var backgroundColor1 = window.getComputedStyle(elem, null).getPropertyValue('background-color'); var foregroundColor1 = window.getComputedStyle(elem, null).getPropertyValue('color');var fontsize1 = window.getComputedStyle(elem, null).getPropertyValue('font-size'); var fontsize = fontsize1.replace('px','' ); var fontweight = window.getComputedStyle(elem, null).getPropertyValue('font-weight'); var largetext=0; var normaltext=0; if (fontweight>=700) { if (fontsize>=19){ largetext++; } else { normaltext++; } } else { if (fontsize>=24) { largetext++; } else { normaltext++; } } if(backgroundColor1.includes('rgba(0, 0, 0, 0)')){ while(backgroundColor1.includes('rgba(0, 0, 0, 0)')){ elem=elem.parentNode; backgroundColor1=window.getComputedStyle(elem,null).getPropertyValue('background-color'); if(elem.nodeName.includes('HTML')){ break;} } } if (backgroundColor1.includes('rgba(0, 0, 0, 0)')){ backgroundColor1='rgb(255, 255, 255)'; } var a = foregroundColor1.split('(')[1].split(')')[0]; a = a.split(','); var b = backgroundColor1.split('(')[1].split(')')[0]; b = b.split(','); var rgbToHex = function (rgb) { var hex = Number(rgb).toString(16); if (hex.length < 2) { hex = '0' + hex; } return hex; }; var fullColorHex = function(r,g,b) { var red = rgbToHex(r); var green = rgbToHex(g); var blue = rgbToHex(b); return red+green+blue; }; foregroundColor=fullColorHex(a[0],a[1],a[2]); backgroundColor=fullColorHex(b[0],b[1],b[2]); function getLuminance(color) { var Rhex, Ghex, Bhex; if (color.match(/^\s*#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\s*$/i)) { Rhex = RegExp.$1; Ghex = RegExp.$2; Bhex = RegExp.$3; } else if (color.match(/^\s*#?([0-9a-f])([0-9a-f])([0-9a-f])\s*$/i)) { Rhex = RegExp.$1 + RegExp.$1; Ghex = RegExp.$2 + RegExp.$2; Bhex = RegExp.$3 + RegExp.$3; } else { return(NaN); } var R8bit = parseInt(Rhex, 16); var G8bit = parseInt(Ghex, 16); var B8bit = parseInt(Bhex, 16); var RsRGB = R8bit/255; var GsRGB = G8bit/255; var BsRGB = B8bit/255; var R = (RsRGB <= 0.03928) ? RsRGB/12.92 : Math.pow(((RsRGB + 0.055)/1.055), 2.4); var G = (GsRGB <= 0.03928) ? GsRGB/12.92 : Math.pow(((GsRGB + 0.055)/1.055), 2.4); var B = (BsRGB <= 0.03928) ? BsRGB/12.92 : Math.pow(((BsRGB + 0.055)/1.055), 2.4); return (0.2126 * R + 0.7152 * G + 0.0722 * B); } function getContrastRatio(color1, color2) { var L1 = getLuminance(color1); var L2 = getLuminance(color2); return Math.round((Math.max(L1, L2) + 0.05)/(Math.min(L1, L2) + 0.05)*100)/100; } var ratio = getContrastRatio(foregroundColor, backgroundColor); if (normaltext!=0){ if (ratio<4.5 && ratio>1.5){ elemm[i].setAttribute('style', 'outline-style:dashed; outline-color:red'); } } else if (largetext!=0){ if (ratio<3 && ratio>1.5){ elemm[i].setAttribute('style', 'outline-style:dashed; outline-color:red'); } } } "; var abc=document.getElementsByTagName("head"); abc[0].appendChild(para); }) ();